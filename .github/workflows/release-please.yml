name: Nodejs script

env:
    AWS_REGION: us-east-1
    ECR_REPOSITORY: qb-repo
    ECS_SERVICE: Bonjour-FargateServiceECC8084D-suxtlvLjx7WX
    ECS_CLUSTER: Bonjour-ClusterEB0386A7-UvrqC1NcuvX4
    ECS_TASK_DEFINITION: qb-ecs-task.json
    CONTAINER_NAME: 'qb-container' 

on:
    push:
        branches:
            - main
jobs:
    test:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20.10.0'

            - name: Install dependencies
              run: npm install

    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        # environment: development

        needs: test

        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                sparse-checkout: |
                  .github
                  src
                  test

            - name: release-please
              id: release
              uses: google-github-actions/release-please-action@v4.0.1
              with:
                  release-type: node
                  token: ${{ secrets.PAT }}
                  target-branch: main

            - name: Checkout code at release tag
              if: steps.release.outputs.releases_created == 'true'
              uses: actions/checkout@v2
              with:
                  ref: ${{ steps.release.outputs.tag_name }}

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  # Build a docker container and
                  # push it to ECR so that it can
                  # be deployed to ECS.
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
              with:
                  task-definition: ${{ env.ECS_TASK_DEFINITION }}
                  container-name: ${{ env.CONTAINER_NAME }}
                  image: ${{ steps.build-image.outputs.image }}
                
            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  service: ${{ env.ECS_SERVICE }}
                  cluster: ${{ env.ECS_CLUSTER }}
                  wait-for-service-stability: true

       